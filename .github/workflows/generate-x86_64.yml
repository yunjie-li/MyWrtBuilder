# This is a basic workflow to help you get started with Actions

name: Generate x86_64 OpenWrt Firmware

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release: 
        description: Upload To Release
        required: false
        default: 'true'
      update-urls:
        description: Update urls
        required: false
        default: 'ture'
      upload-all:
        description: Upload To Artifacts
        required: false
        default: 'false'

env:
  DOWNLOAD_BASE: https://downloads.immortalwrt.org
  VENDOR: immortalwrt
  VERSION: 24.10.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Generate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initialization Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip qemu-utils mkisofs

      - name: Setup Environment Variables
        run: |
          echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          path: origin

      # Update package URLs list
      - name: Update Package URLs
        if: ${{ github.event.inputs.update-urls == 'true' }}
        working-directory: origin
        run: |
          if [ -f "external-package-urls.sh" ]; then
            echo "Executing URL update script..."
            chmod +x external-package-urls.sh
            ./external-package-urls.sh
            echo "Updated URL list:"
            cat external-package-urls.txt
          else
            echo "external-package-urls.sh script not found, skipping URL update"
          fi
      
      - name: Download Image Builder
        run: |
          wget $DOWNLOAD_BASE/releases/$VERSION/targets/x86/64/$VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          tar -xvf $VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          rm -rf $VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64/
      
      - name: Download External Packages
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          mkdir -p packages
          
          if [ -f "external-package-urls.txt" ]; then
            cat external-package-urls.txt | grep -v "^#" | while read line; do
              [ -z "$line" ] && continue
              
              if [[ "$line" == archive:* ]]; then
                archive_url="${line#archive:}"
                echo "Downloading and extracting: $archive_url"
                
                temp_dir=$(mktemp -d)
                filename=$(basename "$archive_url")
                
                wget -O "$temp_dir/$filename" "$archive_url" || { echo "ERROR: Failed to download $archive_url"; continue; }
                
                if [[ "$filename" == *.tar.gz ]] || [[ "$filename" == *.tgz ]]; then
                  tar -xzf "$temp_dir/$filename" -C "$temp_dir"
                elif [[ "$filename" == *.zip ]]; then
                  unzip -q "$temp_dir/$filename" -d "$temp_dir"
                elif [[ "$filename" == *.tar.xz ]]; then
                  tar -xJf "$temp_dir/$filename" -C "$temp_dir"
                elif [[ "$filename" == *.tar.bz2 ]]; then
                  tar -xjf "$temp_dir/$filename" -C "$temp_dir"
                else
                  echo "Unsupported compression format: $filename"
                  continue
                fi
                
                find "$temp_dir" -name "*.ipk" -exec cp {} packages/ \;
                rm -rf "$temp_dir"
              else
                echo "Downloading: $line"
                wget -P packages "$line" || echo "ERROR: Failed to download $line"
              fi
            done
            
            echo "All packages downloaded"
            ls -la packages/
          else
            echo "external-package-urls.txt file does not exist, skipping external package download"
          fi
      
      - name: Run Patch and DIY Scripts
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          bash scripts/builder-patch.sh
          bash scripts/clash.sh
          bash scripts/zsh.sh

      - name: Copy config file
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          if [ -f "files/.config" ]; then
            cp files/.config .config
            echo "Config file copied successfully"
          else
            echo "Error: files/.config does not exist"
            exit 1
          fi

      - name: Generate Firmware
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          bash build.sh

      - name: Upload VDI Image For Development Purpose
        if: github.ref == 'refs/heads/dev'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-vdi-image-${{ env.DATETIME }}
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*.vdi

      - name: Upload All Firmware to Artifacts
        if: github.event.inputs.upload-all == 'true'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-images-${{ env.DATETIME }}
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*

      - name: Upload Firmware to Release
        if: github.event.inputs.release == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*squashfs-combined-efi.img.gz
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: release-${{ env.DATE }}
          overwrite: true
